package main;


import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.*;

public class Gener {

    private static final String POSTGRESQL = "postgreSql";
    private static final String MYSQL = "mySql";

    private static final String SQL_LANGUAGE = POSTGRESQL;

    private static final String POSTGRESQL_USE_COMMAND = "\\c";
    private static final String MYSQL_USE_COMMAND = "USE";

    private static final int NUMBER = 100;
    private static final int SUMMARY_SERVICE_NUMBER = 200;
    private static final int AVAILABLE_SERVICES_NUMBER = 16;
    private static final String LOGINS_PATH = "data/logins.txt";
    private static final String NAMES_MALE_PATH = "data/names_male.txt";
    private static final String PATRONOMICS_MALE_PATH = "data/patronymic_male.txt";
    private static final String SURNAMES_MALE_PATH = "data/surnames_male.txt";
    private static final String NAMES_FEMALE_PATH = "data/names_female.txt";
    private static final String PATRONOMICS_FEMALE_PATH = "data/patronymi—Å_female.txt";
    private static final String SURNAMES_FEMALE_PATH = "data/surnames_female.txt";
    private static final String UPLOUD_AVATARS_DIR = "resources/upload/avatars/";


    public static void main(String[] args) throws FileNotFoundException {

        String USE_COMMAND = "";

        switch (SQL_LANGUAGE) {
            case POSTGRESQL:
                USE_COMMAND = POSTGRESQL_USE_COMMAND;
                break;
            case MYSQL:
                USE_COMMAND = MYSQL_USE_COMMAND;
                break;
            default:
                USE_COMMAND = "";
                break;
        }

        Set<String> loginsSet = new HashSet<>();
        Scanner scannerLogins = new Scanner(new FileInputStream(LOGINS_PATH));
        while (scannerLogins.hasNext()) {
            loginsSet.add(scannerLogins.nextLine());
        }
        List<String> logins = new ArrayList<>(loginsSet);
        System.out.println("Number logins: " + loginsSet.size());


        List<String> namesMale = new ArrayList<>();
        Scanner scannerNamesMale = new Scanner(new FileInputStream(NAMES_MALE_PATH));
        while (scannerNamesMale.hasNext()) {
            namesMale.add(scannerNamesMale.nextLine());
        }
        System.out.println("Number male names: " + namesMale.size());

        List<String> surnamesMale = new ArrayList<>();
        Scanner scannerSurnamesMale = new Scanner(new FileInputStream(SURNAMES_MALE_PATH));
        while (scannerSurnamesMale.hasNext()) {
            surnamesMale.add(scannerSurnamesMale.nextLine());
        }
        System.out.println("Number male surnames: " + surnamesMale.size());

        List<String> patronymicsMale = new ArrayList<>();
        Scanner scannerPatronymicsMale = new Scanner(new FileInputStream(PATRONOMICS_MALE_PATH));
        while (scannerPatronymicsMale.hasNext()) {
            patronymicsMale.add(scannerPatronymicsMale.nextLine());
        }
        System.out.println("Number male patronymics: " + patronymicsMale.size());


        List<String> namesFemale = new ArrayList<>();
        Scanner scannerNamesFemale = new Scanner(new FileInputStream(NAMES_FEMALE_PATH));
        while (scannerNamesFemale.hasNext()) {
            namesFemale.add(scannerNamesFemale.nextLine());
        }
        System.out.println("Number female names: " + namesFemale.size());

        List<String> surnamesFemale = new ArrayList<>();
        Scanner scannerSurnamesFemale = new Scanner(new FileInputStream(SURNAMES_FEMALE_PATH));
        while (scannerSurnamesFemale.hasNext()) {
            surnamesFemale.add(scannerSurnamesFemale.nextLine());
        }
        System.out.println("Number female surnames: " + surnamesFemale.size());

        List<String> patronymicsFemale = new ArrayList<>();
        Scanner scannerPatronymicsFemale = new Scanner(new FileInputStream(PATRONOMICS_FEMALE_PATH));
        while (scannerPatronymicsFemale.hasNext()) {
            patronymicsFemale.add(scannerPatronymicsFemale.nextLine());
        }
        System.out.println("Number female patronymics: " + patronymicsFemale.size());

        PrintStream printStream = new PrintStream("fill_tables.sql");
        printStream.println(USE_COMMAND + " barbershop_db;");
        printStream.println("-- Fill table users");
        printStream.println("INSERT INTO users (login, password, name, surname, patronymic, email, phone, image_path, role)");
        printStream.println("VALUES");
        StringBuilder stringBuffer = new StringBuilder();
        Set<Long> phoneNumbers = new HashSet<>();

        List<Integer> customerIdentifiers = new ArrayList<>();
        List<Integer> employeeIdentifiers = new ArrayList<>();
//        first id == 2 because admin user (who initialized firstly) has id == 1
        int currentId = 2;

        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        for (int i = 0; i < NUMBER; i++) {
            Random random = new Random();
            int randIndex = random.nextInt(logins.size());
            String login = logins.get(randIndex);
            logins.remove(randIndex);
            String name;
            String surname;
            String patronymic;
            long phone;
            String avatarPath = UPLOUD_AVATARS_DIR;

//            Phone generating
            do {
                phone = (long) (random.nextDouble() * Math.pow(10, 9));
            } while (phoneNumbers.contains(phone));
            phoneNumbers.add(phone);

//            Name, surname and patronymic generating
            if (random.nextInt(2) == 0) {
                name = namesMale.get(random.nextInt(namesMale.size()));
                surname = surnamesMale.get(random.nextInt(surnamesMale.size()));
                patronymic = patronymicsMale.get(random.nextInt(patronymicsMale.size()));
                avatarPath += random.nextInt(60) + 1 + ".jpg";
            } else {
                name = namesFemale.get(random.nextInt(namesFemale.size()));
                surname = surnamesFemale.get(random.nextInt(surnamesFemale.size()));
                patronymic = patronymicsFemale.get(random.nextInt(patronymicsFemale.size()));
                avatarPath += random.nextInt(60) + 61 + ".jpg";
            }

//            Role generating
            int role = random.nextInt(4);
            if (role == 2) {
                employeeIdentifiers.add(currentId);
            } else if (role == 3) {
                customerIdentifiers.add(currentId);
            }

            stringBuffer
                    .append("(")

                    .append("\'")
                    .append(login)
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(passwordEncoder.encode(login + "1/"))
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(name)
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(surname)
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(patronymic)
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(login)
                    .append("@gmail.com")
                    .append("\'")
                    .append(", ")

                    .append(phone)
                    .append(", ")

                    .append("\'")
                    .append(avatarPath)
                    .append("\'")
                    .append(", ")

                    .append(role)

                    .append(")");
            printStream.print(stringBuffer.toString());
            if (i < NUMBER - 1) {
                printStream.println(",");
            } else {
                printStream.println(";");
            }
            stringBuffer.setLength(0);
            currentId++;
        }
        currentId = 0;

        printStream.println("\n-- Fill table employees");
        printStream.println("INSERT INTO employees (employee_id, experience, im, fb, vk, work_week)");
        printStream.println("VALUES");
        for (int i = 0; i < employeeIdentifiers.size(); i++) {
            Random randomWeekDay = new Random();
            StringBuilder week;
            week = new StringBuilder();
            for (int j = 0; j < 7; j++) {
                week.append(randomWeekDay.nextInt(2));
            }
            stringBuffer
                    .append("(")

                    .append(employeeIdentifiers.get(i))
                    .append(", ")

                    .append("\'")
                    .append(new java.sql.Date(new Date().getDate()))
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append("https://www.instagram.com/")
                    .append(employeeIdentifiers.get(i))
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append("https://www.facebook.com/")
                    .append(employeeIdentifiers.get(i))
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append("https://vk.com/")
                    .append(employeeIdentifiers.get(i))
                    .append("\'")
                    .append(", ")

                    .append("\'")
                    .append(week.toString())
                    .append("\'")

                    .append(")");
            printStream.print(stringBuffer.toString());
            if (i < employeeIdentifiers.size() - 1) {
                printStream.println(",");
            } else {
                printStream.println(";");
            }
            stringBuffer.setLength(0);
        }

        printStream.println("\n-- Fill table offers");
        printStream.println(
                "INSERT INTO offers (name, description, image_path, price, period, is_main, is_show)\n" +
                        "VALUES\n" +
                        "(\'–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è<br/>—Å—Ç—Ä–∏–∂–∫–∞\', \'–≠—Ç–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç,<br/>–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∏ –≤–æ–ª–æ—Å—ã –±—ã–ª–∏ –ø–æ–¥—Å—Ç—Ä–∏–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.<br/>–ù–∞—à–∏ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º.<br/>–ú—ã—Ç—å—ë –≤–æ–ª–æ—Å. –°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π. –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å.\', \'resources/upload/admin/service/traditional-haircut.png\', 25, 25, true, true),\n" +
                        "(\'–ë—Ä–∏—Ç—å—ë<br/>–±–æ—Ä–æ–¥—ã\', \'–ë—Ä–∏—Ç—å—ë –±–æ—Ä–æ–¥—ã - –æ–¥–Ω–∞ –∏–∑ –Ω–∞—à–∏—Ö —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥.<br/>–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –º—É–∂—á–∏–Ω,<br/>–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∏–º–µ—Ç—å –±–æ—Ä–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–µ.<br/>–†–∞—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞ –ª–∏—Ü–∞. –ë—Ä–∏—Ç—å—ë —à–∞–≤–µ—Ç–∫–æ–π.\', \'resources/upload/admin/service/beard-shave.png\', 40, 60, true, true),\n" +
                        "(\'–ü–æ–¥—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ<br/>—É—Å–æ–≤\', \'–£—Å—ã - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º—É–∂—á–∏–Ω,<br/>–∏ –æ–Ω–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–π–¥—É—Ç –∏–∑ –º–æ–¥—ã –Ω–∞–¥–æ–ª–≥–æ.<br/>–° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ —É—Å—ã —É—Ö–æ–∂–µ–Ω–Ω—ã–º–∏.<br/>–ü–æ–¥—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —É—Å–æ–≤. –£–∫–ª–∞–¥–∫–∞.\', \'resources/upload/admin/service/mustache-trim.png\', 30, 45, true, true),\n" +
                        "(\'–ü–æ–¥—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ<br/>–±–æ—Ä–æ–¥—ã\', \'–í—Å–µ —Ö–æ—Ä–æ—à–æ –∑–Ω–∞—é, —á—Ç–æ –±–æ—Ä–æ–¥–∞ –ø—Ä–∏–¥–∞—ë—Ç –±—Ä—É—Ç–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü—É.<br/>–ß—Ç–æ–±—ã –≤–∞—à–∞ –±–æ—Ä–æ–¥–∞ —Å–º–æ—Ç—Ä–µ–ª–∞—Å—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ,<br/>–∑–∞ –Ω–µ–π –Ω—É–∂–µ–Ω —É—Ö–æ–¥, –∏–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É.<br/>–ü—Ä–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –±–æ—Ä–æ–¥–µ —à–∞–≤–µ—Ç–∫–æ–π. –£–∫–ª–∞–¥–∫–∞ –±–æ—Ä–æ–¥—ã.\', \'resources/upload/admin/service/beard-trim.png\', 25, 30, true, true),\n" +
                        "(\'–†–∏—Å—É–Ω–æ–∫ –Ω–∞ –≤–æ–ª–æ—Å–∞—Ö\', \'–°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç—É.\', \'resources/upload/admin/service/hair-draw.png\', 55, 90, false, true),\n" +
                        "(\'–ê—Ñ—Ä–æ–∫–æ—Å–∏—á–∫–∏\', \'–ú—ã—Ç—å—ë –≤–æ–ª–æ—Å. –ó–∞–ø–ª–µ—Ç–∞–Ω–∏–µ –∫–æ—Å–∏—á–µ–∫.\', \'resources/upload/admin/service/afro-braids.png\', 150, 90, false, true),\n" +
                        "(\'–ü–æ–∫—Ä–∞—Å–∫–∞ –±–æ—Ä–æ–¥—ã\', \'–ú—ã—Ç—å—ë, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å –±–æ—Ä–æ–¥—ã.\', \'resources/upload/admin/service/beard-paint.png\', 45, 75, false, true),\n" +
                        "(\'–ü—Ä–æ–±–æ—Ä/–û–∫–∞–Ω—Ç–æ–≤–∫–∞\', \'–ü—Ä–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏—á—ë—Å–∫–µ.\', \'resources/upload/admin/service/part-edge.png\', 10, 20, false, true),\n" +
                        "(\'–£–∫–ª–∞–¥–∫–∞\', \'–£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å.\', \'resources/upload/admin/service/styling.png\', 10, 15, false, true),\n" +
                        "(\'–¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã\', \'–ú—ã—Ç—å–µ, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É–∫–ª–∞–¥–∫–∞ –±–æ—Ä–æ–¥—ã.\', \'resources/upload/admin/service/beard-tint.png\', 35, 40, false, true),\n" +

                        "(\'–ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –±—Ä–∏—Ç—å—ë\', \'–†–∞—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞ –ª–∏—Ü–∞. –ë—Ä–∏—Ç—å—ë —à–∞–≤–µ—Ç–∫–æ–π.\', \'path/to/preview.jpg\', 40, 60, false, false),\n" +
                        "(\'–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã\', \'–ü—Ä–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –±–æ—Ä–æ–¥–µ —à–∞–≤–µ—Ç–∫–æ–π. –£–∫–ª–∞–¥–∫–∞ –±–æ—Ä–æ–¥—ã.\', \'path/to/preview.jpg\', 25, 30, false, false),\n" +
                        "(\'–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤\', \'–ú—ã—Ç—å—ë, —Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤.\', \'path/to/preview.jpg\', 25, 45, false, false),\n" +
                        "(\'–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\', \'–ú—ã—Ç—å—ë –≤–æ–ª–æ—Å. –°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–≤/–Ω–æ–∂–Ω–∏–∫–∞–º–∏. –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å.\', \'path/to/preview.jpg\', 30, 50, false, false),\n" +
                        "(\'–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π\', \'–ú—ã—Ç—å—ë –≤–æ–ª–æ—Å.–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π. –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å.\', \'path/to/preview.jpg\', 25, 25, false, false),\n" +
                        "(\'–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\', \'–ú—ã—Ç—å—ë –≤–æ–ª–æ—Å. –°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–≤/–Ω–æ–∂–Ω–∏–∫–∞–º–∏. –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å.\', \'path/to/preview.jpg\', 40, 60, false, false),\n" +
                        "(\'–ö–∞–º—É—Ñ–ª—è–∂ —Å–µ–¥–∏–Ω—ã\', \'–ú—ã—Ç—å—ë, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å.\', \'path/to/preview.jpg\', 45, 75, false, false),\n" +
                        "(\'–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\', \'–ú—ã—Ç—å–π, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å.\', \'path/to/preview.jpg\', 60, 60, false, false),\n" +
                        "(\'–û—á–∏—â–∞—é—â–∞—è –º–∞—Å–∫–∞ –¥–ª—è –ª–∏—Ü–∞\', \'–†–∞—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∫–æ–∂–∏ –ª–∏—Ü–∞, –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –æ—á–∏—â–∞—é—â–µ–π –º–∞—Å–∫–∏.\', \'path/to/preview.jpg\', 30, 45, false, false),\n" +
                        "(\'–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å –≤–æ—Å–∫–æ–º (–æ–¥–Ω–∞ –∑–æ–Ω–∞)\', \'–†–∞—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∫–æ–∂–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω—ã, —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å –≤–æ—Å–∫–æ–º.\', \'path/to/preview.jpg\', 15, 15, false, false),\n" +
                        "(\'–ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã\', \'–ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã.\', \'path/to/preview.jpg\', 10, 15, false, false);"
        );

        printStream.println("\n-- Fill table reservations");
        printStream.println("INSERT INTO reservations (offer_id, customer_id, employee_id, date)");
        printStream.println("VALUES");
        for (int i = 0; i < SUMMARY_SERVICE_NUMBER; i++) {
            Random random = new Random();
            int serviceId = random.nextInt(AVAILABLE_SERVICES_NUMBER + 1) + 1;
            stringBuffer
                    .append("(")
                    .append(serviceId)
                    .append(", ")
                    .append(random.nextInt(customerIdentifiers.size() + 1) + 1)
                    .append(", ")
                    .append(random.nextInt(employeeIdentifiers.size() + 1) + 1)
                    .append(", ")
                    .append("\'")
                    .append(new SimpleDateFormat("yyyy-MM-dd HH:mm")
                            .format(new Date()))
                    .append("\'")
                    .append(")");
            printStream.print(stringBuffer.toString());
            if (i < SUMMARY_SERVICE_NUMBER - 1) {
                printStream.println(",");
            } else {
                printStream.println(";");
            }
            stringBuffer.setLength(0);
            currentId++;
        }
    }
}
